package ftp;

import java.io.IOException;
import java.util.Optional;

import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.pool2.KeyedPooledObjectFactory;
import org.apache.commons.pool2.PooledObject;
import org.apache.commons.pool2.PooledObjectFactory;
import org.apache.commons.pool2.impl.DefaultPooledObject;

import com.yonyou.scf.tools.middleware.log.LogType;
import com.yonyou.scf.tools.middleware.log.Loggerx;
import com.yonyou.scf.tools.system.CodeException;

/**
 * ftp连接工厂类
 * @author zhangjinliang
 * 2017年5月26日 下午4:24:01
 * 
 */
public class FTPConnectionFactory implements KeyedPooledObjectFactory<FTPClientConfiguration,FTPClient> {
	
	public FTPConnectionFactory() {
	}
	

	@Override
	public PooledObject<FTPClient> makeObject(FTPClientConfiguration fTPClientConfiguration) throws Exception {
		FTPClient ftp = new FTPClient();
		
		ftp.setConnectTimeout(fTPClientConfiguration.getTimeout());//超时
		ftp.connect(fTPClientConfiguration.getIp(), fTPClientConfiguration.getPort());//连接
		
		boolean result = ftp.login(fTPClientConfiguration.getAccount(), fTPClientConfiguration.getPwd());//登录
		
        if (!result) {
             throw new CodeException("ftpClient登陆失败! userName:" + fTPClientConfiguration.getAccount() + " ; password:" + fTPClientConfiguration.getPwd());
        }
        ftp.setFileType(FTPClient.BINARY_FILE_TYPE);//文件类型
        ftp.enterLocalPassiveMode();//发起端口申请。linux选择
        
		return new DefaultPooledObject<FTPClient>(ftp);
	}

	/*
	 * 销毁当前对象 先登出再断开连接
	 *  (non-Javadoc)
	 * @see org.apache.commons.pool2.PooledObjectFactory#destroyObject(org.apache.commons.pool2.PooledObject)
	 */
	@Override
	public void destroyObject(FTPClientConfiguration fTPClientConfiguration,PooledObject<FTPClient> p) throws Exception {
		
		if(p==null) return;
		
			Optional<FTPClient> option = Optional.ofNullable(p.getObject());
			
			if(!option.isPresent()) return;
			
			if(option.get()==null) return;
			
			FTPClient f = option.get();
			
			if(f.isConnected()){
				boolean flag = f.logout();
//				f.disconnect();
				if(!flag){
					System.out.println("ftpClient登出失败");
				}
			}else{
				System.out.println("无有效ftpClient对象");
			}
			
	}

	/* 
	 * 验证一个对象是否有效，发送noop指令 是为了验证当前连接是否有效
	 * (non-Javadoc)
	 * @see org.apache.commons.pool2.PooledObjectFactory#validateObject(org.apache.commons.pool2.PooledObject)
	 */
	@Override
	public boolean validateObject(PooledObject<FTPClient> p) {
		logger.info(LogType.INFO, "ftpClient对象，验证开始");
		boolean flag = true;
		if(p!=null && p.getObject()!=null){
			try {
				flag = p.getObject().sendNoOp();
			} catch (IOException e) {
				e.printStackTrace();
			} 
		}
		logger.info(LogType.INFO, "ftpClient对象，验证结束");
		return flag;
	}

	@Override
	public void activateObject(PooledObject<FTPClient> p) throws Exception {
		
	}

	@Override
	public void passivateObject(PooledObject<FTPClient> p) throws Exception {
		
	}

}
